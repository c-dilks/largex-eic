name: ci

on:
  pull_request:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

env:
  ebeam_en: 10
  pbeam_en: 100
  cross_ang: -25

jobs:

# BUILD ---------------------------------------------------------------------------

# # build test
#   build:
#     runs-on: [ ubuntu-latest ]
#     container:
#       image: cjdilks/largex-eic:dev
#       options: --user root
#     steps:
#       - name: checkout
#         uses: actions/checkout@v2
#       - name: env
#         run: |
#           source env.sh
#           echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
#           echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
#       - name: compile
#         run: make
#       - name: artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: x_build
#           path: |
#             LargexDict_rdict.pcm
#             libLargex.so
#             mstwpdf/*.o
#             mstwpdf/*.so
#             src/LargexDict.cxx

# DELPHES ---------------------------------------------------------------------------

# # run delphes on a hepmc file
#   delphes_fastsim:
#     runs-on: [ ubuntu-latest ]
#     container:
#       image: cjdilks/largex-eic:dev
#       options: --user root
#     strategy:
#       fail-fast: false
#       matrix:
#         # minq2: [1, 10, 100, 1000]
#         minq2: [1]
#     steps:
#       - name: checkout
#         uses: actions/checkout@v2
#         with:
#           submodules: true
#       - name: env
#         run: |
#           source env.sh
#           echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
#           echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
#       - name: download_hepmc_files
#         env:
#           S3_ACCESS_KEY: ${{secrets.S3_ACCESS_KEY}}
#           S3_SECRET_KEY: ${{secrets.S3_SECRET_KEY}}
#         run: |
#           s3tools/add-host.sh
#           echo "-- build list"
#           s3tools/generate-hepmc-list.sh ${{env.ebeam_en}}x${{env.pbeam_en}} ${{matrix.minq2}} ci | tee hepmc.list
#           echo "-- download"
#           while read hepmc; do mc cp $hepmc datagen/; done < hepmc.list
#           echo "-- list datagen/"
#           ls -lh datagen
#       - name: delphes
#         run: |
#           echo "-- delphes"
#           for hepmc in datagen/*.hepmc.gz; do ./exeDelphes.sh $hepmc; done
#           echo "-- list datarec/"
#           ls -lh datarec
#       - name: config_fastsim
#         run: |
#           s3tools/make-fastsim-config.sh ${{env.ebeam_en}}x${{env.pbeam_en}} ${{matrix.minq2}} datarec delphes.config
#           echo "-- cat config"
#           cat delphes.config
#       - name: artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: delphes_${{env.ebeam_en}}x${{env.pbeam_en}}_q2min${{matrix.minq2}}_output
#           path: |
#             datarec/*.root
#             delphes.config


# CONFIG ---------------------------------------------------------------------------

# generate fullsim config file
  # config_fullsim:
  #   runs-on: [ ubuntu-latest ]
  #   container:
  #     image: cjdilks/largex-eic:dev
  #     options: --user root
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: env
  #       run: |
  #         source env.sh
  #         echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
  #     - name: generate_config
  #       env:
  #         S3_ACCESS_KEY: ${{secrets.S3_ACCESS_KEY}}
  #         S3_SECRET_KEY: ${{secrets.S3_SECRET_KEY}}
  #       run: |
  #         s3tools/add-host.sh
  #         s3tools/make-canyonlands-config.sh ${{env.ebeam_en}}x${{env.pbeam_en}} s 8 s3files.config
  #     - name: cat_config
  #       run: cat s3files.config
  #     - name: artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: x_config_fullsim
  #         path: s3files.config

# ANALYSIS ---------------------------------------------------------------------------

# run analysis macros matrix for fastsim
  # analysis_fastsim:
  #   needs: [ build, delphes_fastsim ]
  #   runs-on: [ ubuntu-latest ]
  #   container:
  #     image: cjdilks/largex-eic:dev
  #     options: --user root
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       aname: [x_q2, p_eta, yRatio]
  #       recon: [Ele, DA, JB, Mixed, Sigma, eSigma]
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: env
  #       run: |
  #         source env.sh
  #         echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
  #     - name: get_build_artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: x_build
  #     - name: fastsim_get_delphes_files
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: datarec
  #     - name: fastsim_organize_delphes_files
  #       run: |
  #         find datarec -name "*.root" -print | tee tmp.list
  #         cat tmp.list | while read f; do mv -v $f datarec/; done
  #         cat datarec/delphes*/delphes.config > delphes.config
  #         sort -nr -o delphes.config{,}
  #     - name: cat_config
  #       run: cat delphes.config
  #     - name: analysis_macro
  #       run: root -b -q 'macro/ci/analysis_${{matrix.aname}}.C("delphes.config",${{env.ebeam_en}},${{env.pbeam_en}},${{env.cross_ang}},"fastsim.${{matrix.aname}}.${{matrix.recon}}","${{matrix.recon}}")'
  #     - name: artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: fastsim_${{matrix.aname}}_${{matrix.recon}}_analysis
  #         path: out

# run benchmark macros matrix for fullsim #####OLD
  # benchmark_fullsim:
  #   needs: [ build, config_fullsim ]
  #   runs-on: [ ubuntu-latest ]
  #   container:
  #     image: cjdilks/largex-eic:dev
  #     options: --user root
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       name:
  #         - bin_test
  #         - coverage_x_q2
  #         - coverage_p_eta
  #         - resolution_x_q2
  #         - resolution_p_eta
  #         - yRatio
  #       mode:
  #         - fullsim
  #       include:
  #         - mode: fullsim
  #           config: s3files.config
  #         - name: bin_test
  #           amacro: analysis_x_q2.C
  #           pmacro: postprocess_bin_test.C
  #         - name: coverage_x_q2
  #           amacro: analysis_x_q2.C
  #           pmacro: postprocess_x_q2.C
  #         - name: resolution_x_q2
  #           amacro: analysis_x_q2.C
  #           pmacro: postprocess_x_q2.C
  #         - name: coverage_p_eta
  #           amacro: analysis_p_eta.C
  #           pmacro: postprocess_p_eta.C
  #         - name: resolution_p_eta
  #           amacro: analysis_p_eta.C
  #           pmacro: postprocess_p_eta.C
  #         - name: yRatio
  #           amacro: analysis_yRatio.C
  #           pmacro: postprocess_yRatio.C
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: env
  #       run: |
  #         source env.sh
  #         echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
  #     - name: get_build_artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: x_build
  #     - name: fullsim_get_config
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: x_config_fullsim
  #     - name: echo_matrix
  #       run: |
  #         echo "name = ${{matrix.name}}"
  #         echo "mode = ${{matrix.mode}}"
  #         echo "config = ${{matrix.config}}"
  #         echo "analysis macro = ${{matrix.amacro}}"
  #         echo "postprocess macro = ${{matrix.pmacro}}"
  #     - name: cat_config
  #       run: cat ${{matrix.config}}
  #     - name: analysis
  #       env:
  #         S3_ACCESS_KEY: ${{secrets.S3_ACCESS_KEY}}
  #         S3_SECRET_KEY: ${{secrets.S3_SECRET_KEY}}
  #       run: root -b -q macro/ci/${{matrix.amacro}}'("${{matrix.config}}",${{env.ebeam_en}},${{env.pbeam_en}},${{env.cross_ang}},"${{matrix.name}}.${{matrix.mode}}")'
  #     - name: postprocess
  #       run: root -b -q macro/ci/${{matrix.pmacro}}'("out/${{matrix.name}}.${{matrix.mode}}.root")'
  #     - name: artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{matrix.name}}_${{matrix.mode}}_plots
  #         path: |
  #           out/*.images/*.png
  #           out/*.root

# run reconstruction methods matrix for fastsim #####OLD
  # benchmark_recon:
  #   needs: [ build, delphes_fastsim ]
  #   runs-on: [ ubuntu-latest ]
  #   container:
  #     image: cjdilks/largex-eic:dev
  #     options: --user root
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       name:
  #         - recon_coverage
  #         - recon_resolution
  #       mode:
  #         - fastsim
  #       recon:
  #         - Ele
  #         - DA
  #         - JB
  #         - Mixed
  #         - Sigma
  #         - eSigma
  #       include:
  #         - mode: fastsim
  #           config: delphes.config
  #         - name: recon_coverage
  #           amacro: analysis_x_q2.C
  #           pmacro: postprocess_x_q2.C
  #         - name: recon_resolution
  #           amacro: analysis_x_q2.C
  #           pmacro: postprocess_x_q2.C
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: env
  #       run: |
  #         source env.sh
  #         echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
  #     - name: get_build_artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: x_build
  #     - name: fastsim_get_delphes_files
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: datarec
  #     - name: fastsim_organize_delphes_files
  #       run: |
  #         find datarec -name "*.root" -print | tee tmp.list
  #         cat tmp.list | while read f; do mv -v $f datarec/; done
  #         cat datarec/delphes*/delphes.config > delphes.config
  #         sort -nr -o delphes.config{,}
  #     - name: echo_matrix
  #       run: |
  #         echo "name = ${{matrix.name}}"
  #         echo "mode = ${{matrix.mode}}"
  #         echo "config = ${{matrix.config}}"
  #         echo "recon = ${{matrix.recon}}"
  #         echo "analysis macro = ${{matrix.amacro}}"
  #         echo "postprocess macro = ${{matrix.pmacro}}"
  #     - name: cat_config
  #       run: cat ${{matrix.config}}
  #     - name: analysis
  #       run: root -b -q macro/ci/${{matrix.amacro}}'("${{matrix.config}}",${{env.ebeam_en}},${{env.pbeam_en}},${{env.cross_ang}},"${{matrix.name}}.${{matrix.recon}}","${{matrix.recon}}")'
  #     - name: postprocess
  #       run: root -b -q macro/ci/${{matrix.pmacro}}'("out/${{matrix.name}}.${{matrix.recon}}.root")'
  #     - name: artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{matrix.name}}_${{matrix.recon}}_plots
  #         path: |
  #           out/*.images/*.png
  #           out/*.root


# POSTPROCESS ---------------------------------------------------------------------------

# run postprocess macros matrix for fastsim and fullsim
  postprocess:
    if: ${{always()}}
    # needs: 
    #   - build
    #   - analysis_fastsim
    #   # - analysis_fullsim
    runs-on: [ ubuntu-latest ]
    container:
      image: cjdilks/largex-eic:dev
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        mode: [fastsim, fullsim]
        # mode: [fastsim]
        pname:
          - bin_test
          - coverage_x_q2
          - coverage_p_eta
          - resolution_x_q2
          - resolution_p_eta
          - y_minima
        # recon: [Ele, Mixed, JB, DA, Sigma, eSigma]
        recon: [Ele]
        include:
          - { pname: bin_test,         recon: Ele, aname: x_q2,   pmacro: postprocess_bin_test.C }
          - { pname: coverage_x_q2,    recon: Ele, aname: x_q2,   pmacro: postprocess_x_q2.C }
          - { pname: coverage_p_eta,   recon: Ele, aname: p_eta,  pmacro: postprocess_p_eta.C }
          - { pname: resolution_x_q2,  recon: Ele, aname: x_q2,   pmacro: postprocess_x_q2.C }
          - { pname: resolution_x_q2,  recon: DA, aname: x_q2,   pmacro: postprocess_x_q2.C }
          - { pname: resolution_p_eta, recon: Ele, aname: p_eta,  pmacro: postprocess_p_eta.C }
          - { pname: y_minima,         recon: Ele, aname: yRatio, pmacro: postprocess_yRatio.C }
        # exclude:
        #   - { pname: bin_test, recon: Mixed }
        #   - { pname: bin_test, recon: JB }
        #   - { pname: bin_test, recon: DA }
        #   - { pname: bin_test, recon: Sigma }
        #   - { pname: bin_test, recon: eSigma }
        #   - { pname: y_minima, recon: Mixed }
        #   - { pname: y_minima, recon: JB }
        #   - { pname: y_minima, recon: DA }
        #   - { pname: y_minima, recon: Sigma }
        #   - { pname: y_minima, recon: eSigma }
        #   - { aname: p_eta,    recon: Mixed }
        #   - { aname: p_eta,    recon: JB }
        #   - { aname: p_eta,    recon: DA }
        #   - { aname: p_eta,    recon: Sigma }
        #   - { aname: p_eta,    recon: eSigma }
    steps:
      - name: echo_matrix
        run: |
          echo "aname = ${{matrix.aname}}"
          echo "pname = ${{matrix.pname}}"
          echo "mode = ${{matrix.mode}}"
          echo "recon = ${{matrix.recon}}"
          echo "pmacro = ${{matrix.pmacro}}"
      - name: checkout
        uses: actions/checkout@v2
      - name: env
        run: |
          source env.sh
          echo "MSTWPDF_HOME=${MSTWPDF_HOME}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MSTWPDF_HOME}" >> $GITHUB_ENV
      - name: get_build_artifacts
        uses: actions/download-artifact@v2
        with:
          name: x_build
      - name: get_analysis_artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.mode}}_${{matrix.aname}}_${{matrix.recon}}_analysis
          path: out
      - name: postprocess_macro
        run: |
          ls out
          mv -v out/${{matrix.mode}}.{${{matrix.aname}},${{matrix.pname}}}.${{matrix.recon}}.root
          root -b -q 'macro/ci/${{matrix.pmacro}}("out/${{matrix.mode}}.${{matrix.pname}}.${{matrix.recon}}.root")'
          rm -v out/${{matrix.mode}}.${{matrix.pname}}.${{matrix.recon}}.root
      - name: artifacts
        uses: actions/upload-artifact@v2
        with:
          name: fastsim_${{matrix.pname}}_${{matrix.recon}}
          path: out

# ARTIFACTS ---------------------------------------------------------------------------

# collect artifacts into one directory
  # collect:
  #   if: ${{always()}}
  #   needs: 
  #     - analysis_fastsim
  #     # - benchmark_fullsim
  #     # - benchmark_recon
  #   runs-on: [ ubuntu-latest ]
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: download
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: results
  #     - name: tree
  #       run: tree results
  #     - name: cull
  #       run: |
  #         rm -vr results/x_*
  #         rm -vr results/delphes_*_output
  #         find results -name "*.root" -print | xargs rm -v
  #         rm -v results/y_minima*/*/canv*.png
  #     - name: tree
  #       run: tree results
  #     - name: organize
  #       run: macro/ci/organize-artifacts.sh results
  #     - name: tree
  #       run: tree results
  #     - name: upload
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: _FULL_RESULTS
  #         path: results
